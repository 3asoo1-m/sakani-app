import { auth, db } from '@/lib/firebase';
import { Feather, Ionicons, MaterialIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { onAuthStateChanged, signOut } from 'firebase/auth';
import { doc, getDoc } from 'firebase/firestore';
import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  Image,
  Pressable,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

const ProfileScreen = () => {
  const [userData, setUserData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const userDoc = await getDoc(doc(db, 'users', user.uid));
        if (userDoc.exists()) {
          setUserData(userDoc.data());
        }
        setLoading(false);
      }
    });

    return () => unsubscribe();
  }, []);

  const handleLogout = async () => {
    await signOut(auth);
    router.replace('/login');
  };

  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color="#333" />
      </View>
    );
  }

  if (!userData) {
    return (
      <View style={styles.centered}>
        <Text>تعذر تحميل البيانات</Text>
      </View>
    );
  }

  const Item = ({ icon, label, value }: { icon: React.ReactNode; label: string; value: string }) => (
    <Pressable style={({ pressed }) => [styles.item, pressed && styles.itemPressed]}>
      <View style={styles.itemIcon}>{icon}</View>
      <View style={styles.itemText}>
        <Text style={styles.itemLabel}>{label}</Text>
        <View style={{ flexDirection: 'row', alignItems: 'center', gap: 4 }}>
          <Text style={styles.itemValue}>{value}</Text>
          <MaterialIcons name="info-outline" size={16} color="#aaa" />
        </View>
      </View>
    </Pressable>
  );

  return (
    <SafeAreaView style={{ flex: 1 }}>
    <ScrollView contentContainerStyle={styles.container}>

      {/* صورة المستخدم */}
      <View style={styles.avatarContainer}>
        <Image
          source={{ uri: 'https://i.pravatar.cc/150?u=' + userData.email }}
          style={styles.avatar}
        />
        <Text style={styles.username}>{userData.fullname}</Text>
      </View>

      <View style={styles.card}>
        <Item icon={<Feather name="mail" size={20} color="#444" />} label="البريد الإلكتروني" value={userData.email} />
        <Item icon={<Feather name="calendar" size={20} color="#444" />} label="تاريخ الميلاد" value={userData.birthday} />
        <Item icon={<Feather name="map-pin" size={20} color="#444" />} label="المدينة" value={userData.city} />
        <Item icon={<Ionicons name="school-outline" size={20} color="#444" />} label="طالب جامعي؟" value={userData.isStudent ? 'نعم' : 'لا'} />
        {userData.isStudent && userData.universityName && (
          <Item icon={<Ionicons name="business-outline" size={20} color="#444" />} label="اسم الجامعة" value={userData.universityName} />
        )}
      </View>

      <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>
        <Text style={styles.logoutText}>تسجيل الخروج</Text>
      </TouchableOpacity>
    </ScrollView>
    </SafeAreaView>
  );
};

export default ProfileScreen;

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#f9f9f9',
    paddingBottom: 50,
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 25,
    textAlign: 'center',
    color: '#333',
  },
  avatarContainer: {
    alignItems: 'center',
    marginBottom: 25,
  },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  username: {
    fontSize: 20,
    fontWeight: '600',
    color: '#222',
  },
  card: {
    backgroundColor: '#ffffffee',
    borderRadius: 20,
    padding: 15,
    elevation: 2,
    shadowColor: '#000',
    shadowOpacity: 0.08,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 3 },
  },
  item: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 18,
    borderRadius: 10,
    paddingVertical: 6,
    paddingHorizontal: 4,
  },
  itemPressed: {
    backgroundColor: '#f2f2f2',
    transform: [{ scale: 0.98 }],
  },
  itemIcon: {
    width: 30,
    alignItems: 'center',
  },
  itemText: {
    marginLeft: 15,
    flex: 1,
  },
  itemLabel: {
    fontSize: 13,
    color: '#888',
  },
  itemValue: {
    fontSize: 16,
    color: '#222',
    fontWeight: '500',
  },
  logoutButton: {
    marginTop: 30,
    backgroundColor: '#FF5C5C',
    padding: 14,
    borderRadius: 15,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.15,
    shadowOffset: { width: 0, height: 3 },
    elevation: 3,
  },
  logoutText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});


Above was the code before being modified to show data on the right of screen in profile screen.





------------------

//app/tabs/_layout.tsx
import { FontAwesome } from '@expo/vector-icons';
import { Redirect, Tabs } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabase';


export default function TabLayout() {
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const checkAuth = async () => {
      const {
        data: { session },
        error,
      } = await supabase.auth.getSession();

      if (error) {
        console.log('Error getting session:', error.message);
        setIsAuthenticated(false);
      } else {
        setIsAuthenticated(!!session?.user);
      }
      setIsLoading(false);
    };

    // Check once on mount
    checkAuth();

    // Subscribe to auth changes
    const { data: authListener } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        setIsAuthenticated(!!session?.user);
      }
    );

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, []);

  if (isLoading) return null;

  if (!isAuthenticated) {
    return <Redirect href="/login" />;
  }

  return (
    <Tabs
      screenOptions={({ route }) => ({
        tabBarShowLabel: false,
        headerShown: false,
        tabBarStyle: {
          backgroundColor: '#f9f9f9',
          borderTopColor: '#ddd',
          height: 60,
        },
        tabBarIcon: ({ color, size, focused }) => {
          let iconName: keyof typeof FontAwesome.glyphMap = 'question';

          switch (route.name) {
            case 'home':
              iconName = 'home';
              break;
            case 'search':
              iconName = 'search';
              break;
            case 'favorites':
              iconName = 'heart';
              break;
            case 'notifications':
              iconName = 'bell';
              break;
            case 'profile':
              iconName = 'user';
              break;
          }

          return (
            <FontAwesome
              name={iconName}
              size={24}
              color={focused ? '#1D9BF0' : '#888'}
            />
          );
        },
      })}
    >
      <Tabs.Screen name="home" />
      <Tabs.Screen name="search" />
      <Tabs.Screen name="favorites" />
      <Tabs.Screen name="notifications" />
      <Tabs.Screen name="profile" />
    </Tabs>
  );
}
هاد هو الكود السابق, قم بتعديله


----------------------------------------------------
هنا تم اضافة زر " تحويل حساب الى مالك"
import { Feather, Ionicons, MaterialIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  Image,
  Pressable,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { supabase } from '../../lib/supabase';

// ... (دالة translateGender تبقى كما هي)
function translateGender(genderArabic: string):string{
  switch (genderArabic) {
    case 'female':
      return 'أنثى';
    case 'male':
      return 'ذكر';
    case 'both':
      return 'أفضل عدم الإجابة';
    default:
      return 'غير معروف';
  }
}

const ProfileScreen = () => {
  const [userData, setUserData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const fetchUserData = async () => {
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();

      if (userError || !user) {
        router.replace('/signin');
        return;
      }

      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (error || !data) {
        console.log('خطأ في جلب بيانات المستخدم:', error);
      } else {
        setUserData(data);
      }

      setLoading(false);
    };

    fetchUserData();
  }, []);

  const handleLogout = async () => {
    await supabase.auth.signOut();
    router.replace('/signin');
  };

  // --- دالة جديدة للانتقال إلى تدفق المالك ---
  const navigateToBecomeOwner = () => {
    // سنقوم بإنشاء هذه الشاشة لاحقاً
    router.push('/screens/owner/verify');
  };

  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color="#333" />
      </View>
    );
  }

  if (!userData) {
    return (
      <View style={styles.centered}>
        <Text>تعذر تحميل البيانات</Text>
      </View>
    );
  }

  const Item = ({ icon, label, value }: { icon: React.ReactNode; label: string; value: string }) => (
    <Pressable style={({ pressed }) => [styles.item, pressed && styles.itemPressed]}>
      <View style={styles.infoIcon}>
        <MaterialIcons name="info-outline" size={16} color="#aaa" />
      </View>
      <View style={styles.itemText}>
        <Text style={styles.itemLabel}>{label}</Text>
        <Text style={styles.itemValue}>{value}</Text>
      </View>
      <View style={styles.itemIcon}>{icon}</View>
    </Pressable>
  );

  return (
    <SafeAreaView style={styles.safeArea}>
      <ScrollView contentContainerStyle={styles.container}>
        {/* ... (جزء الصورة والاسم يبقى كما هو) ... */}
        <View style={styles.avatarContainer}>
          <Image
            source={{ uri: 'https://i.pravatar.cc/150?u=' + userData.email }}
            style={styles.avatar}
          />
          <Text style={styles.username}>{userData.fullname}</Text>
        </View>

        {/* ... (بطاقة المعلومات الشخصية تبقى كما هي ) ... */}
        <View style={styles.card}>
          <Item icon={<Feather name="mail" size={20} color="#444" />} label="البريد الإلكتروني" value={userData.email} />
          <Item icon={<Feather name="calendar" size={20} color="#444" />} label="تاريخ الميلاد" value={userData.birthday} />
          <Item icon={<Feather name="user" size={20} color="#444" />}label="الجنس" value={translateGender(userData.gender)} />
          <Item icon={<Feather name="map-pin" size={20} color="#444" />} label="المدينة" value={userData.city || ''} />
          <Item icon={<Ionicons name="school-outline" size={20} color="#444" />} label="طالب جامعي؟" value={userData.isstudent ? 'نعم' : 'لا'} />
          {userData.isstudent && userData.university && (
            <Item icon={<Ionicons name="business-outline" size={20} color="#444" />} label="اسم الجامعة" value={userData.university} />
          )}
        </View>

        {/* --- القسم الجديد: بطاقة التحويل إلى مالك --- */}
        <View style={styles.ownerCard}>
          <Ionicons name="business-outline" size={32} color="#1E90FF" />
          <View style={styles.ownerCardTextContainer}>
            <Text style={styles.ownerCardTitle}>هل تملك عقاراً؟</Text>
            <Text style={styles.ownerCardSubtitle}>اعرضه الآن على سَكَني و صل لآلاف الطلاب.</Text>
          </View>
          <TouchableOpacity 
            style={styles.ownerButton}
            onPress={navigateToBecomeOwner}
          >
            <Text style={styles.ownerButtonText}>ابدأ الآن</Text>
            <Feather name="chevron-left" size={20} color="#fff" />
          </TouchableOpacity>
        </View>
        {/* ----------------------------------------- */}

        <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>
          <Text style={styles.logoutText}>تسجيل الخروج</Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

export default ProfileScreen;

const styles = StyleSheet.create({
  // ... (كل الأنماط السابقة تبقى كما هي)
  safeArea: {
    flex: 1,
    backgroundColor: '#f9f9f9', // توحيد لون الخلفية
  },
  container: {
    padding: 20,
    paddingBottom: 50,
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 25,
    textAlign: 'center',
    color: '#333',
  },
  avatarContainer: {
    alignItems: 'center',
    marginBottom: 25,
  },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  username: {
    fontSize: 20,
    fontWeight: '600',
    color: '#222',
    textAlign: 'right',
  },
  card: {
    backgroundColor: '#ffffffee',
    borderRadius: 20,
    padding: 15,
    elevation: 2,
    shadowColor: '#000',
    shadowOpacity: 0.08,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 3 },
  },
  item: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 18,
    borderRadius: 10,
    paddingVertical: 6,
    paddingHorizontal: 4,
  },
  itemPressed: {
    backgroundColor: '#f2f2f2',
    transform: [{ scale: 0.98 }],
  },
  infoIcon: {
    marginRight: 'auto',
    paddingLeft: 5,
  },
  itemIcon: {
    width: 30,
    alignItems: 'center',
    marginLeft: 15,
  },
  itemText: {
    flex: 1,
    textAlign: 'right',
    marginRight: 10,
  },
  itemLabel: {
    fontSize: 13,
    color: '#888',
    textAlign: 'right',
  },
  itemValue: {
    fontSize: 16,
    color: '#222',
    fontWeight: '500',
    textAlign: 'right',
  },
  logoutButton: {
    marginTop: 20, // تقليل المسافة العلوية قليلاً
    backgroundColor: '#FF5C5C',
    padding: 14,
    borderRadius: 15,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.15,
    shadowOffset: { width: 0, height: 3 },
    elevation: 3,
  },
  logoutText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  // --- الأنماط الجديدة لبطاقة المالك ---
  ownerCard: {
    backgroundColor: '#fff',
    borderRadius: 20,
    padding: 20,
    marginTop: 30, // مسافة بينها وبين البطاقة العلوية
    alignItems: 'center',
    elevation: 2,
    shadowColor: '#000',
    shadowOpacity: 0.08,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 3 },
  },
  ownerCardTextContainer: {
    marginVertical: 15,
    alignItems: 'center',
  },
  ownerCardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#222',
    marginBottom: 5,
  },
  ownerCardSubtitle: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    paddingHorizontal: 10,
  },
  ownerButton: {
    flexDirection: 'row-reverse', // لعرض الأيقونة على يسار النص
    backgroundColor: '#1E90FF',
    paddingVertical: 12,
    paddingHorizontal: 25,
    borderRadius: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
  ownerButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    marginRight: 8, // مسافة بين النص والأيقونة
  },
});
