import { FontAwesome, Ionicons, MaterialIcons } from '@expo/vector-icons';
import { useLocalSearchParams, useNavigation, useRouter } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  I18nManager,
  Image,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Share,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import ImageViewing from 'react-native-image-viewing';
import { SafeAreaView } from 'react-native-safe-area-context';
import { supabase } from '../../lib/supabase';
import { useAuth } from '../../lib/useAuth'; // هوك جلب المستخدم

// فرض اللغة العربية من اليمين لليسار
I18nManager.forceRTL(true);

export default function ApartmentDetails() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const navigation = useNavigation();
  const router = useRouter();

  const user = useAuth();
  const [apartment, setApartment] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'about' | 'gallery' | 'review'>('about');
  const [isFavorite, setIsFavorite] = useState(false);

  const [isImageViewVisible, setIsImageViewVisible] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  const [reviews, setReviews] = useState<any[]>([]);
  const [reviewLoading, setReviewLoading] = useState(false);
  const [newRating, setNewRating] = useState(0);
  const [newComment, setNewComment] = useState('');
  const [submittingReview, setSubmittingReview] = useState(false);
  const [averageRating, setAverageRating] = useState(0);



  // جلب بيانات الشقة
  useEffect(() => {
    if (!id) return;

    const fetchApartment = async () => {
      setLoading(true);
      const { data, error } = await supabase
        .from('apartments')
        .select('*')
        .eq('id', id)
        .single();

      if (error || !data) {
        console.log('خطأ في جلب بيانات الشقة:', error);
        router.back();
      } else {
        setApartment(data);
      }

      setLoading(false);
    };

    fetchApartment();
  }, [id]);

  // جلب حالة المفضلة من Supabase
  useEffect(() => {
    if (!id || !user) return;

    const checkFavorite = async () => {
      const { data, error } = await supabase
        .from('favorites')
        .select('id')
        .eq('user_id', user.id)
        .eq('apartment_id', id)
        .single();

      if (data) setIsFavorite(true);
      else setIsFavorite(false);
    };

    checkFavorite();
  }, [id, user]);

  // جلب المراجعات عند تحميل الصفحة أو تغير id
  useEffect(() => {
    fetchReviews();
  }, [id]);

  // تبديل حالة المفضلة
  const toggleFavorite = async () => {
    if (!user) {
      alert('يرجى تسجيل الدخول أولاً');
      return;
    }

    if (isFavorite) {
      // حذف من المفضلة
      const { error } = await supabase
        .from('favorites')
        .delete()
        .eq('user_id', user.id)
        .eq('apartment_id', id);

      if (!error) setIsFavorite(false);
    } else {
      // إضافة للمفضلة
      const { error } = await supabase
        .from('favorites')
        .insert([{ user_id: user.id, apartment_id: id }]);

      if (!error) setIsFavorite(true);
    }
  };
  const submitReview = async () => {
  if (!user) {
    alert('يرجى تسجيل الدخول لإضافة مراجعة');
    return;
  }
  if (newRating === 0) {
    alert('يرجى اختيار تقييم');
    return;
  }
  setSubmittingReview(true);

  const { error } = await supabase.from('reviews').insert([{
    apartment_id: id,
    user_id: user.id,
    rating: newRating,
    comment: newComment,
  }]);

  setSubmittingReview(false);

  if (error) {
    alert('حدث خطأ أثناء إرسال المراجعة.');
    console.log(error);
  } else {
    alert('تم إضافة مراجعتك بنجاح!');
    setNewRating(0);
    setNewComment('');
    fetchReviews(); // تحديث قائمة المراجعات
  }
};


  const onShare = async () => {
    try {
      const url = `https://yourappdomain.com/apartments/${id}`; // استبدل هذا بالرابط الحقيقي لتطبيقك
      await Share.share({
        message: `شاهد هذه الشقة المتاحة للإيجار: ${url}`,
        url, // في iOS يدعم الرابط بشكل خاص
        title: apartment.title,
      });
    } catch (error) {
      alert('حدث خطأ أثناء المشاركة.');
    }
  };

  const fetchReviews = async () => {
  if (!id) return;
  setReviewLoading(true);
  const { data, error } = await supabase
    .from('reviews')
    .select('id, rating, comment, created_at')
    .eq('apartment_id', id)
    .order('created_at', { ascending: false });

  if (error) {
    console.log('خطأ في جلب المراجعات:', error);
  } else {
    setReviews(data || []);

    // حساب المتوسط
    if (data && data.length > 0) {
      const total = data.reduce((sum, review) => sum + review.rating, 0);
      const avg = total / data.length;
      setAverageRating(avg);
    } else {
      setAverageRating(0);
    }
  }
  setReviewLoading(false);
};


  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color="#1D9BF0" />
      </View>
    );
  }

  if (!apartment) {
    return (
      <View style={styles.centered}>
        <Text>لم يتم العثور على تفاصيل الشقة.</Text>
      </View>
    );
  }

  const images: string[] = apartment.images || [apartment.image_url];
  const price = apartment.price || 0;

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />

      {/* Header Images */}
      <View style={styles.headerImageContainer}>
        <Image source={{ uri: images[0] }} style={styles.mainImage} resizeMode="cover" />

        <View style={styles.backButton}>
          <TouchableOpacity onPress={() => navigation.goBack()}>
            <Ionicons name="arrow-back" size={24} color="#000" />
          </TouchableOpacity>
        </View>

        <View style={styles.actionButtons}>
          <TouchableOpacity style={styles.iconButton} onPress={onShare}>
            <Ionicons name="share-social-outline" size={22} color="#000" />
          </TouchableOpacity>
          <TouchableOpacity style={styles.iconButton} onPress={toggleFavorite}>
            <Ionicons
              name={isFavorite ? 'heart' : 'heart-outline'}
              size={22}
              color={isFavorite ? 'red' : '#000'}
            />
          </TouchableOpacity>
        </View>

        {/* Mini Gallery thumbnails */}
        <View style={styles.thumbnailRow}>
          {images.slice(0, 4).map((uri, index) => (
            <Image key={index} source={{ uri }} style={styles.thumbnail} resizeMode="cover" />
          ))}
          {images.length > 4 && (
            <View style={styles.moreImages}>
              <Text style={styles.moreImagesText}>+{images.length - 4}</Text>
            </View>
          )}
        </View>
      </View>

      {/* Content */}
      <KeyboardAvoidingView
        style={{ flex: 1 }}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 0}
      >
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false} keyboardShouldPersistTaps="handled">
        <Text style={styles.apartmentType}>شقة</Text>
        <View style={styles.ratingRow}>
          <Ionicons name="star" size={16} color="#fbbf24" />
          <Text style={styles.ratingText}>
  {averageRating.toFixed(1)} ({reviews.length} مراجع{reviews.length !== 1 ? 'ات' : 'ة'})
</Text>
        </View>

        <Text style={styles.title}>{apartment.title}</Text>
        <Text style={styles.city}>{apartment.city}</Text>

        {/* Tabs */}
        <View style={styles.tabs}>
          <TouchableOpacity onPress={() => setActiveTab('about')}>
            <Text style={activeTab === 'about' ? styles.tabActive : styles.tabInactive}>حول</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={() => setActiveTab('gallery')}>
            <Text style={activeTab === 'gallery' ? styles.tabActive : styles.tabInactive}>معرض الصور</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={() => setActiveTab('review')}>
            <Text style={activeTab === 'review' ? styles.tabActive : styles.tabInactive}>المراجعات</Text>
          </TouchableOpacity>
        </View>

        {/* Tab Content */}
        {activeTab === 'about' && (
          <>
            {/* Details */}
            <View style={styles.detailsRow}>
              <View style={styles.detailItem}>
                <Ionicons name="bed-outline" size={24} color="#000" />
                <Text style={styles.detailText}>{apartment.beds || 3} أسِرّة</Text>
              </View>
              <View style={styles.detailItem}>
                <MaterialIcons name="bathtub" size={24} color="#000" />
                <Text style={styles.detailText}>{apartment.baths || 1} حمام</Text>
              </View>
              <View style={styles.detailItem}>
                <FontAwesome name="expand" size={20} color="#000" />
                <Text style={styles.detailText}>{apartment.area || 0} متر²</Text>
              </View>
            </View>

            {/* Description */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>الوصف</Text>
              <Text style={styles.description}>{apartment.description || 'لا يوجد وصف'}</Text>
            </View>

            {/* Contact Info */}
            <View style={styles.contactRow}>
              <Image
                source={{ uri: apartment.agent_image || 'https://randomuser.me/api/portraits/men/32.jpg' }}
                style={styles.agentImage}
              />
              <View>
                <Text style={styles.agentName}>{apartment.agent_name || 'John Doe'}</Text>
                <Text style={styles.agentContact}>
                  للتواصل: {apartment.contact_number || 'غير متوفر'}
                </Text>
              </View>
            </View>
          </>
        )}

        {activeTab === 'gallery' && (
          <>
            <View style={styles.galleryContainer}>
              {images.map((uri, index) => (
                <TouchableOpacity
                  key={index}
                  onPress={() => {
                    setCurrentImageIndex(index);
                    setIsImageViewVisible(true);
                  }}
                  hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
                >
                  <Image source={{ uri }} style={styles.galleryImage} resizeMode="cover" />
                </TouchableOpacity>
              ))}
            </View>

            <ImageViewing
              images={images.map((uri) => ({ uri }))}
              imageIndex={currentImageIndex}
              visible={isImageViewVisible}
              onRequestClose={() => setIsImageViewVisible(false)}
            />
          </>
        )}

        {activeTab === 'review' && (
  <View style={styles.section}>
    <Text style={styles.sectionTitle}>آراء المستأجرين</Text>
    {reviewLoading ? (
      <ActivityIndicator size="small" color="#1D9BF0" />
    ) : reviews.length === 0 ? (
      <Text style={styles.description}>لا توجد مراجعات بعد.</Text>
    ) : (
      reviews.map((review, index) => {
        // تأكد من وجود id، وإلا استخدم index كمفتاح
        const key = review.id ?? index;

        // احصل على تقييم صحيح (عدد صحيح بين 0 و 5)
        const rating = Math.min(5, Math.max(0, Math.round(review.rating || 0)));

        // تعليق المراجعة مع حماية من القيم الفارغة
        const comment = review.comment || 'لا يوجد تعليق';

        // تاريخ المراجعة بصيغة محلية أو فارغ إذا لم يتوفر
        const date = review.created_at
          ? new Date(review.created_at).toLocaleDateString()
          : '';

        return (
          <View key={key} style={styles.reviewItem}>
            <View style={styles.reviewHeader}>
              {[...Array(5)].map((_, i) => (
                <Ionicons
                  key={i}
                  name={i < rating ? 'star' : 'star-outline'}
                  size={16}
                  color="#fbbf24"
                />
              ))}
            </View>
            <Text style={styles.reviewComment}>{comment}</Text>
            <Text style={styles.reviewDate}>{date}</Text>
          </View>
        );
      })
    )}

    {/* نموذج إضافة مراجعة */}
    <View style={{ marginTop: 20 }}>
      <Text style={{ fontWeight: 'bold', marginBottom: 8, textAlign: 'right' }}>أضف مراجعتك:</Text>

      {/* اختيار التقييم */}
      <View style={{ flexDirection: 'row-reverse', marginBottom: 12, justifyContent: 'flex-start' }}>
        {[1, 2, 3, 4, 5].map((star) => (
          <TouchableOpacity key={star} onPress={() => setNewRating(star)} style={{ marginLeft: 6 }}>
            <Ionicons
              name={star <= newRating ? 'star' : 'star-outline'}
              size={28}
              color="#fbbf24"
            />
          </TouchableOpacity>
        ))}
      </View>

      {/* مربع التعليق */}
      <TextInput
        style={{
          borderWidth: 1,
          borderColor: '#ccc',
          borderRadius: 8,
          height: 80,
          padding: 8,
          textAlignVertical: 'top',
          textAlign: 'right',
          fontSize: 14,
          marginBottom: 12,
        }}
        multiline
        placeholder="اكتب تعليقك هنا..."
        value={newComment}
        onChangeText={setNewComment}
      />

      {/* زر الإرسال */}
      <TouchableOpacity
        onPress={submitReview}
        disabled={submittingReview}
        style={{
          backgroundColor: submittingReview ? '#aaa' : '#1D9BF0',
          paddingVertical: 12,
          borderRadius: 10,
          alignItems: 'center',
        }}
      >
        {submittingReview ? (
          <ActivityIndicator color="#fff" />
        ) : (
          <Text style={{ color: '#fff', fontWeight: 'bold', fontSize: 16 }}>إرسال المراجعة</Text>
        )}
      </TouchableOpacity>
    </View>
  </View>
)}
      </ScrollView>
    </KeyboardAvoidingView>

      {/* Book Now */}
      <View style={styles.bookNowRow}>
        <Text style={styles.price}>
          {price} <Text style={styles.priceUnit}>شيكل / شهر</Text>
        </Text>
        <TouchableOpacity style={styles.bookButton}>
          <Text style={styles.bookButtonText}>احجز الآن</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  centered: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#fff' },
  headerImageContainer: { position: 'relative' },
  mainImage: { width: '100%', height: 250 },
  backButton: {
    position: 'absolute',
    top: 16,
    left: 16,
    backgroundColor: 'rgba(255,255,255,0.8)',
    borderRadius: 50,
    padding: 8,
  },
  actionButtons: { position: 'absolute', top: 16, right: 16, flexDirection: 'row' },
  iconButton: {
    backgroundColor: 'rgba(255,255,255,0.8)',
    borderRadius: 50,
    padding: 8,
    marginLeft: 8,
  },
  thumbnailRow: { position: 'absolute', bottom: -30, right: 16, flexDirection: 'row' },
  thumbnail: { width: 60, height: 60, borderRadius: 8, marginLeft: 8 },
  moreImages: {
    width: 60,
    height: 60,
    borderRadius: 8,
    backgroundColor: 'rgba(0,0,0,0.4)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  moreImagesText: { color: '#fff', fontWeight: 'bold' },
  content: { marginTop: 40, paddingHorizontal: 16 },
  apartmentType: { color: '#1D9BF0', fontWeight: '500', textAlign: 'right' },
  ratingRow: { flexDirection: 'row-reverse', alignItems: 'center', marginTop: 4 },
  ratingText: { marginRight: 4, color: '#555' },
  title: { fontSize: 22, fontWeight: 'bold', marginTop: 4, textAlign: 'right' },
  city: { color: '#777', marginTop: 2, textAlign: 'right' },
  tabs: {
    flexDirection: 'row-reverse',
    marginTop: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    paddingBottom: 8,
  },
  tabActive: { color: '#1D9BF0', fontWeight: '500', marginLeft: 16 },
  tabInactive: { color: '#aaa', marginLeft: 16 },
  detailsRow: {
    flexDirection: 'row-reverse',
    justifyContent: 'space-between',
    marginTop: 16,
  },
  detailItem: { alignItems: 'center' },
  detailText: { marginTop: 4, fontSize: 12, color: '#555' },
  section: { marginTop: 20 },
  sectionTitle: { fontWeight: 'bold', fontSize: 16, marginBottom: 4, textAlign: 'right' },
  description: { color: '#666', lineHeight: 20, textAlign: 'right' },
  contactRow: { flexDirection: 'row-reverse', alignItems: 'center', marginTop: 20 },
  agentImage: { width: 50, height: 50, borderRadius: 25, marginLeft: 12 },
  agentName: { fontWeight: 'bold', color: '#000' },
  agentContact: { color: '#777', fontSize: 12 },
  galleryContainer: { flexDirection: 'row', flexWrap: 'wrap', marginTop: 16 },
  galleryImage: { width: 150, height: 180, borderRadius: 8, margin: '1%' },
  reviewItem: {
    marginBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    paddingBottom: 12,
  },
  reviewHeader: {
    flexDirection: 'row-reverse',
    marginBottom: 4,
  },
  reviewComment: {
    color: '#444',
    marginBottom: 4,
    textAlign: 'right',
  },
  reviewDate: {
    fontSize: 12,
    color: '#999',
    textAlign: 'right',
  },
  bookNowRow: {
    flexDirection: 'row-reverse',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#ddd',
  },
  price: { fontSize: 18, fontWeight: 'bold', color: '#000' },
  priceUnit: { fontSize: 14, color: '#777' },
  bookButton: {
    backgroundColor: '#1D9BF0',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 12,
  },
  bookButtonText: { color: '#fff', fontWeight: 'bold' },
});
